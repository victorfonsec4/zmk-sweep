/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "italian.keycodes"

// Layer definitions
    #define BASE 0
    #define SYM 1
    #define EXT 2
    #define FNC 3
    #define SYM2 4
    #define ACCENT 5
// -----------------

&mt {
   //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ {

    combos {
        compatible = "zmk,combos";
        combo_accent {
            timeout-ms = <300>;
            key-positions = <32 33>;
            bindings = <&mo ACCENT>;
        };
    };

    macros {
      ZMK_MACRO(spacemacs_1,
                wait-ms = <30>;
                tap-ms = <40>;
                bindings = <&kp LC(G) &kp SPACE &kp N1>;
                )
      ZMK_MACRO(spacemacs_2,
                wait-ms = <30>;
                tap-ms = <40>;
                bindings = <&kp LC(G) &kp SPACE &kp N2>;
                )
      ZMK_MACRO(spacemacs_3,
                wait-ms = <30>;
                tap-ms = <40>;
                bindings = <&kp LC(G) &kp SPACE &kp N3>;
                )
      ZMK_MACRO(spacemacs_4,
                wait-ms = <30>;
                tap-ms = <40>;
                bindings = <&kp LC(G) &kp SPACE &kp N4>;
                )
      ZMK_MACRO(spacemacs_5,
                wait-ms = <30>;
                tap-ms = <40>;
                bindings = <&kp LC(G) &kp SPACE &kp N5>;
                )
      ZMK_MACRO(spacemacs_tab,
                wait-ms = <30>;
                tap-ms = <40>;
                bindings = <&kp LC(G) &kp SPACE &kp TAB>;
                )

    };

    keymap {
            compatible = "zmk,keymap";

        // Base alpha layer
          default_layer {
    bindings = <
    &kp Q &kp W &kp E &kp R &kp T           &kp Y &kp U  &kp I     &kp O   &kp P
    &kp A &kp S &kp D &lt 2 F &kp G         &kp H &kp J  &kp K     &lt 2 L &kp BACKSPACE
    &kp Z &kp X &kp C &kp V &kp B           &kp N &kp M  &kp COMMA &kp DOT &lt 3 SLASH
             &sk LCTRL &sl 1                      &kp SPACE &sk LSHIFT
    >;
    };

        // Symbols
          sym_layer {
    bindings = <
    &kp EXCL     &kp AT      &kp HASH       &kp DOLLAR      &kp PERCENT        &kp PIPE     &kp AMPERSAND      &kp ASTERISK       &kp BACKSLASH       &trans
    &kp LPAR         &kp RPAR &kp MINUS &kp UNDERSCORE &kp TILDE   &kp ESCAPE &kp SEMICOLON &kp COLON &kp EQUAL &kp PLUS
    &kp LEFT_BRACKET &kp RIGHT_BRACKET  &kp LEFT_BRACE &kp RIGHT_BRACE &kp GRAVE   &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES &kp CARET &trans  &trans
                                                  &to 4  &kp LA(TAB)       &kp ENTER &to 0
    >;
    };

        // numbers and navigation
        nums_layer {
    bindings = <
    &trans  &kp N7 &kp N8 &kp N9  &trans      &kp LC(LEFT)  &trans        &trans        &kp LC(RIGHT) &trans
    &trans  &kp N4 &kp N5 &kp N6  &trans      &kp LG(L)     &kp LS(TAB)   &kp LEFT_ALT  &kp TAB       &trans
    &trans  &kp N1 &kp N2 &kp N3  &kp N0      &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &trans
                                  &trans &trans    &to 5  &to 0
    >;
    };

        // spacemacs layer
          spacemacs_layer {
    bindings = <
    &trans &trans &spacemacs_tab &trans &trans                             &trans &trans &trans &trans &trans
    &spacemacs_5  &spacemacs_4 &spacemacs_3 &spacemacs_2 &spacemacs_1       &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans                                     &trans &trans &trans &trans &trans
                             &trans &trans         &trans &to 0
    >;
    };

        // Low frequency symbols.
          symbols_2_layer {
    bindings = <
    &kp IT_CARET &kp IT_UNDER &kp IT_PND &kp IT_EUR &kp IT_HASH              &none &none &none &none &none
    &kp IT_BKTK &kp IT_TILDE &kp IT_BSLH &kp IT_PIPE &kp IT_AND         &none &none &none &none &none
    &none &none &none &none &none                                  &none &none &none &none &none
                             &none &none                           &none &none
    >;
    };

        // Used to type regional accents.
          accent_layer {
    bindings = <
    &none &none &none &kp IT_CEGR &none                         &none &none &none &none &none
    &kp IT_AGRV &kp IT_IGRV &kp IT_OGRV &kp IT_EGRV &kp IT_EACU &none &none &none &none &none
    &none &none &none &kp IT_UGRV &none                         &none &none &none &none &none
                       &none &none                         &none &none
    >;
    };

  };
};
